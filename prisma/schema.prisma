generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  name               String
  analyticsEvents    AnalyticsEvent[]
  comments           Comment[]
  emailSubscriptions EmailSubscription[]
  moderationLogs     ModerationLog[]
  posts              Post[]
  pushSubscriptions  PushSubscription[]

  @@index([email])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  slug  String @unique
  posts Post[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  slug  String @unique
  posts Post[] @relation("PostToTag")
}

model Post {
  id            Int       @id @default(autoincrement())
  title         String
  content       String
  excerpt       String?
  featuredImage String?
  published     Boolean   @default(false)
  status        String    @default("draft")
  scheduledFor  DateTime?
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorId      Int
  categoryId    Int?
  comments      Comment[]
  author        User      @relation(fields: [authorId], references: [id])
  category      Category? @relation(fields: [categoryId], references: [id])
  tags          Tag[]     @relation("PostToTag")

  @@index([published, createdAt])
  @@index([authorId])
  @@index([categoryId])
  @@index([createdAt])
  @@index([status, scheduledFor])
}

model Comment {
  id          Int      @id @default(autoincrement())
  content     String
  authorName  String
  authorEmail String
  approved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  postId      Int
  userId      Int?
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User?    @relation(fields: [userId], references: [id])

  @@index([postId, approved])
  @@index([createdAt])
  @@index([userId])
}

model AnalyticsEvent {
  id        Int      @id @default(autoincrement())
  type      String
  data      String
  timestamp DateTime @default(now())
  sessionId String
  userAgent String?
  ip        String?
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([type, timestamp])
  @@index([sessionId])
  @@index([userId])
  @@index([timestamp])
}

model WebVitals {
  id        Int      @id @default(autoincrement())
  name      String
  value     Float
  rating    String
  delta     Float
  eventId   String
  timestamp DateTime @default(now())
  sessionId String
  userAgent String?
  url       String?

  @@index([name, rating])
  @@index([timestamp])
  @@index([sessionId])
}

model PushSubscription {
  id        Int      @id @default(autoincrement())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model EmailSubscription {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String?
  userId     Int?
  subscribed Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([userId])
  @@index([subscribed])
}

model ModerationLog {
  id          Int      @id @default(autoincrement())
  contentType String
  contentId   Int
  content     String
  flags       String
  confidence  Float
  approved    Boolean
  moderatedBy Int?
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [moderatedBy], references: [id])

  @@index([contentType, contentId])
  @@index([approved])
  @@index([createdAt])
}
